package com.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.seatrend.utilsdk.database.greendao.table.OnePictureIndexEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ONE_PICTURE_INDEX_ENTITY".
*/
public class OnePictureIndexEntityDao extends AbstractDao<OnePictureIndexEntity, Long> {

    public static final String TABLENAME = "ONE_PICTURE_INDEX_ENTITY";

    /**
     * Properties of entity OnePictureIndexEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Lsh = new Property(1, String.class, "lsh", false, "LSH");
        public final static Property Hphm = new Property(2, String.class, "hphm", false, "HPHM");
        public final static Property ZpTotal = new Property(3, int.class, "zpTotal", false, "ZP_TOTAL");
        public final static Property Cllxmc = new Property(4, String.class, "cllxmc", false, "CLLXMC");
    }


    public OnePictureIndexEntityDao(DaoConfig config) {
        super(config);
    }
    
    public OnePictureIndexEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ONE_PICTURE_INDEX_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"LSH\" TEXT UNIQUE ," + // 1: lsh
                "\"HPHM\" TEXT," + // 2: hphm
                "\"ZP_TOTAL\" INTEGER NOT NULL ," + // 3: zpTotal
                "\"CLLXMC\" TEXT);"); // 4: cllxmc
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ONE_PICTURE_INDEX_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, OnePictureIndexEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String lsh = entity.getLsh();
        if (lsh != null) {
            stmt.bindString(2, lsh);
        }
 
        String hphm = entity.getHphm();
        if (hphm != null) {
            stmt.bindString(3, hphm);
        }
        stmt.bindLong(4, entity.getZpTotal());
 
        String cllxmc = entity.getCllxmc();
        if (cllxmc != null) {
            stmt.bindString(5, cllxmc);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, OnePictureIndexEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String lsh = entity.getLsh();
        if (lsh != null) {
            stmt.bindString(2, lsh);
        }
 
        String hphm = entity.getHphm();
        if (hphm != null) {
            stmt.bindString(3, hphm);
        }
        stmt.bindLong(4, entity.getZpTotal());
 
        String cllxmc = entity.getCllxmc();
        if (cllxmc != null) {
            stmt.bindString(5, cllxmc);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public OnePictureIndexEntity readEntity(Cursor cursor, int offset) {
        OnePictureIndexEntity entity = new OnePictureIndexEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // lsh
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // hphm
            cursor.getInt(offset + 3), // zpTotal
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // cllxmc
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, OnePictureIndexEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLsh(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setHphm(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setZpTotal(cursor.getInt(offset + 3));
        entity.setCllxmc(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(OnePictureIndexEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(OnePictureIndexEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(OnePictureIndexEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
